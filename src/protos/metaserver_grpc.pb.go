// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: src/protos/metaserver.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetaServerClient is the client API for MetaServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetaServerClient interface {
	ChooseDataServer(ctx context.Context, in *MetaRequest, opts ...grpc.CallOption) (*MetaReply, error)
	StoreStatus(ctx context.Context, in *StoreStatusReply, opts ...grpc.CallOption) (*Status, error)
	GetMetaInfo(ctx context.Context, in *GetMetaInfoRequest, opts ...grpc.CallOption) (*StoreStatusReply, error)
}

type metaServerClient struct {
	cc grpc.ClientConnInterface
}

func NewMetaServerClient(cc grpc.ClientConnInterface) MetaServerClient {
	return &metaServerClient{cc}
}

func (c *metaServerClient) ChooseDataServer(ctx context.Context, in *MetaRequest, opts ...grpc.CallOption) (*MetaReply, error) {
	out := new(MetaReply)
	err := c.cc.Invoke(ctx, "/protos.MetaServer/ChooseDataServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServerClient) StoreStatus(ctx context.Context, in *StoreStatusReply, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/protos.MetaServer/StoreStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServerClient) GetMetaInfo(ctx context.Context, in *GetMetaInfoRequest, opts ...grpc.CallOption) (*StoreStatusReply, error) {
	out := new(StoreStatusReply)
	err := c.cc.Invoke(ctx, "/protos.MetaServer/GetMetaInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetaServerServer is the server API for MetaServer service.
// All implementations must embed UnimplementedMetaServerServer
// for forward compatibility
type MetaServerServer interface {
	ChooseDataServer(context.Context, *MetaRequest) (*MetaReply, error)
	StoreStatus(context.Context, *StoreStatusReply) (*Status, error)
	GetMetaInfo(context.Context, *GetMetaInfoRequest) (*StoreStatusReply, error)
	mustEmbedUnimplementedMetaServerServer()
}

// UnimplementedMetaServerServer must be embedded to have forward compatible implementations.
type UnimplementedMetaServerServer struct {
}

func (UnimplementedMetaServerServer) ChooseDataServer(context.Context, *MetaRequest) (*MetaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChooseDataServer not implemented")
}
func (UnimplementedMetaServerServer) StoreStatus(context.Context, *StoreStatusReply) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreStatus not implemented")
}
func (UnimplementedMetaServerServer) GetMetaInfo(context.Context, *GetMetaInfoRequest) (*StoreStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetaInfo not implemented")
}
func (UnimplementedMetaServerServer) mustEmbedUnimplementedMetaServerServer() {}

// UnsafeMetaServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetaServerServer will
// result in compilation errors.
type UnsafeMetaServerServer interface {
	mustEmbedUnimplementedMetaServerServer()
}

func RegisterMetaServerServer(s grpc.ServiceRegistrar, srv MetaServerServer) {
	s.RegisterService(&MetaServer_ServiceDesc, srv)
}

func _MetaServer_ChooseDataServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServerServer).ChooseDataServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.MetaServer/ChooseDataServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServerServer).ChooseDataServer(ctx, req.(*MetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaServer_StoreStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreStatusReply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServerServer).StoreStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.MetaServer/StoreStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServerServer).StoreStatus(ctx, req.(*StoreStatusReply))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaServer_GetMetaInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetaInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServerServer).GetMetaInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.MetaServer/GetMetaInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServerServer).GetMetaInfo(ctx, req.(*GetMetaInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetaServer_ServiceDesc is the grpc.ServiceDesc for MetaServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetaServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.MetaServer",
	HandlerType: (*MetaServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChooseDataServer",
			Handler:    _MetaServer_ChooseDataServer_Handler,
		},
		{
			MethodName: "StoreStatus",
			Handler:    _MetaServer_StoreStatus_Handler,
		},
		{
			MethodName: "GetMetaInfo",
			Handler:    _MetaServer_GetMetaInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/protos/metaserver.proto",
}
